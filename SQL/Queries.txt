
-- -- -- -- List the total number of unique products in the database:
SELECT COUNT(*) total_no_of_products FROM product;

-- -- -- -- List the top 20 popular products (based on rating):
SELECT * FROM product ORDER BY product_rating DESC LIMIT 20;

-- -- -- -- Details of the orders whose mode of payment is Cash on Delivery:
SELECT * FROM orders WHERE mode_of_payment = 'Cash on Delivery';

-- -- -- -- List the top 10 orders with the highest order total:
SELECT * FROM orders ORDER BY order_total DESC LIMIT 10;

-- -- -- -- Give a list of number of orders on the basis of number of days to deliver them:
SELECT COUNT(*) no_of_orders,no_of_days_to_deliver FROM orders GROUP BY no_of_days_to_deliver ORDER BY no_of_days_to_deliver;

-- -- -- -- List of Admins who are not handling any orders/products:
SELECT * FROM Admins WHERE order_id IS NULL;

-- -- -- -- How many customers have a membership status of 'PRIME', 'BASIC' or 'ELITE':
SELECT membership_status,COUNT(*) no_of_customers FROM customers GROUP BY membership_status;

-- -- -- -- List of all ELITE Customers:
SELECT * FROM customers WHERE membership_status = 'ELITE';

-- -- -- -- List of 20 items with highest coupon discount:
SELECT * FROM cart ORDER BY coupon DESC LIMIT 20;

-- -- -- -- List of all the delivery agents who have a rating between 7 and 9:
SELECT * FROM delivery_agent WHERE rating BETWEEN 7 AND 9 ORDER BY rating;

-- -- -- -- List of all delivery agents whose first name starts with 'S':
SELECT * FROM delivery_agent WHERE fname LIKE 'S%';

-- -- -- -- Retrieve all products that are low on stock:
SELECT * FROM product WHERE product_stock < 20;

-- -- -- -- Retrieve all products who are cheap and have a rating of 4 or more:
SELECT * FROM product WHERE product_price < 400 AND product_rating >= 4;

-- -- -- -- Most expensive product:
SELECT * FROM product ORDER BY product_price DESC LIMIT 1;

-- -- -- -- Retrieve the total revenue generated by the store:
SELECT SUM(transaction_amount) FROM wallet;

-- -- -- -- What is the average balance in the wallet of all customers:
SELECT AVG(balance) FROM wallet;

-- -- -- -- Add a new product to the database:
INSERT INTO product(product_id,product_name,product_price,product_stock,product_rating) VALUES (201,'Havmor Ice Cream',60,8,3.8),(202,'Granola Bars',113,12,4.7);

-- -- -- -- Add a new entry in wallet Table:
INSERT INTO wallet(customer_id,transaction_amount,balance) VALUES (200,399,4000);

-- -- -- -- Change the password of a customer:
UPDATE customers SET pass = 'Sanmay7788' WHERE customer_id = 198;

-- -- -- -- Change the membership status of a customer:
UPDATE customers SET membership_status = 'PRIME' WHERE customer_id = 197;

-- -- -- -- Remove a product from cart:
DELETE FROM cart WHERE product_id IN (26,50,164);

-- -- -- -- Retrieve the delivery details of all the orders delivered to a particular customer:
SELECT * FROM delivery_agent WHERE customer_id = 35;

-- -- -- -- Number of products with a particular rating (rating > 3):
SELECT COUNT(*) no_of_products, product_rating FROM product WHERE product_rating > 3 GROUP BY product_rating ORDER BY product_rating;

-- -- -- -- List of products who have a good rating and their name starts with 'B':
SELECT * FROM product WHERE product_rating > 3 AND product_name LIKE 'B%' ORDER BY product_rating DESC;

-- -- -- -- List of customers whose email id ends with '.edu' (They are mostly students):
SELECT * FROM customers WHERE email_id LIKE '%.edu';

-- -- -- -- Find a customer using his/her phone number and password (for login):
SELECT * FROM customers WHERE mobile_number = 4028292168 AND pass = 'L5Whumkqxyu';


-- -- -- To check constraints:

INSERT INTO product(product_id,product_name,product_price,product_stock,product_rating) VALUES (203,'Kwality cream', 100, 10, 6.7);

INSERT INTO product(product_id,product_name,product_price,product_stock,product_rating) VALUES (203,'Kwality cream', 100, -7, 3.9);

INSERT INTO product(product_id,product_name,product_price,product_stock,product_rating) VALUES (203,'Kwality cream', 1000000, 68, 3.9);

INSERT INTO cart(product_id,customer_id,product_quantity, cart_total,coupon) VALUES (134, 155,12,13244,12);

INSERT INTO orders(order_id, product_id,order_total,mode_of_payment,no_of_days_to_deliver) VALUES (120, 110, 35000, 'Cash on Delivery', 3);

INSERT INTO orders(order_id, product_id,order_total,mode_of_payment,no_of_days_to_deliver) VALUES (201, 110, 35000, 'Cash on Delivery', NULL);

INSERT INTO cart(product_id, customer_id,product_quantity,cart_total,coupon) VALUES (250,123,5,7000,5.4);

INSERT INTO Admins(admin_id,order_id,product_id,username,pass) VALUES (203,332,125,'fwfdf','djdsbd');




-- -- -- -- Showing details about the customer and his cart and balance:

SELECT customers.customer_id, customers.username , wallet.balance, product.product_name, product.product_price ,cart.product_quantity,(product.product_price*cart.product_quantity) as "Product_Total" from customers inner join wallet on wallet.customer_id = customers.customer_id inner join cart on cart.customer_id = customers.customer_id inner join product on product.product_id = cart.product_id;


-- -- -- -- Checking if there are orders that haven't been delivered yet:

SELECT  * from orders  where order_id IN
	( SELECT order_id FROM orders 
    where (no_of_days_to_deliver != 0)
    and  (no_of_days_to_deliver < 6));


-- -- -- -- If OrderTotal is greater than 1000 and the user is ELITE, we will give a 10% discount:

SELECT orders.order_id, customers.username, orders.order_total, (orders.order_total*0.9) as "discounted_price" from Orders 
	inner join delivery_agent on delivery_agent.order_id = orders.order_id 
	inner join customers on customers.customer_id = delivery_agent.customer_id 
		where orders.order_id in (select order_id from orders where (order_total>1000)) 
		and customers.membership_status = "ELITE" ;


-- -- -- -- If OrderTotal is greater than 1000 and the user is PRIME, we will give a 5% discount:

SELECT orders.order_id, customers.username, orders.order_total, (orders.order_total*0.95) as "discounted_price" from Orders 
	inner join delivery_agent on delivery_agent.order_id = orders.order_id 
	inner join customers on customers.customer_id = delivery_agent.customer_id 
		where orders.order_id in (select order_id from orders where (order_total>1000)) 
		and customers.membership_status = "PRIME" ;

        
-- -- -- -- Showing only the orders that have been made using Cash on Delivery:

SELECT delivery_agent.agent_ID, orders.order_total,orders.mode_of_payment,orders.no_of_days_to_deliver from orders inner join delivery_agent on delivery_agent.order_id = orders.order_id where delivery_agent.Order_ID in (SELECT Order_ID from Orders where Mode_of_Payment = "Cash on Delivery");
        
        
-- -- -- -- All the customer details along with delivery agent assigned for their order:

SELECT c.username as customer_name,c.customer_id,c.delivery_address,c.email_id,a.fname as agent_name, a.agent_id ,a.rating as agent_rating FROM customers as c JOIN delivery_agent as a ON c.customer_id = a.customer_id ORDER BY c.customer_id;


-- -- -- -- Customer cancels the order because of poor rating of delivery agent:

DELETE FROM orders WHERE order_id IN (SELECT order_id FROM delivery_agent WHERE rating <= (SELECT MIN(rating) FROM delivery_agent));
